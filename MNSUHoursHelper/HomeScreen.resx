<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAGYTQ1BmFkSAZhVFoGYVRcBmFUTwZxZF/2cWRf9mGUf/ZhlI/2YZ
        SP9mGUj/ZhhH/2cWRf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2YVRcBnFkSwZhZEgGgUREAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAGgQQCBmFUXAZxZF/2cWRf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2wK
        Ov9uBjf/bgc4/24GNv9rDDz/ZxdG/2cWRf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cW
        RLBoEEAgAAAAAAAAAAAAAAAAAAAAAAAAAABoFUVgZxZF/2cWRf9nFkX/ZxZF/2cWRf9nFkX/ZxdF/2YZ
        SP9mF0X/SFiC/z1tlv8/Z5H/PG6Y/01MeP9oFEL/ZhlI/2cWRf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cW
        Rf9nFkX/ZxZF/2YVRPBoFUVgAAAAAAAAAAAAAAAAaBBAIGcWRf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cX
        Rv9oFUT/aww8/20HNv8wkLT/GLvd/x2w0v8XvuD/Onie/3EAMP9sDj3/ZxVF/2YXRv9nFkX/ZxZF/2cW
        Rf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2YVRPBoEEAgAAAAAAAAAABmFUXAZxZF/2cWRf9nFkX/ZxZF/2cW
        Rf9nFkX/aRRC/2QeTP9MSnf/S0t2/05DcP9QQW7/TkJu/01Cbf9MRXD/S0x1/1FHc/9mGUn/aRVD/2cW
        Rf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cWRLAAAAAAZhNDUGcWRf9nFkX/ZxZF/2cW
        Rf9nFkX/ZxZF/2UXRf9oCzn/VDRg/wbj//8B5P//AuT//wPk//8D5P//AeT//wLj//8A5v//Dtj3/10i
        UP9oDz3/ZhZG/2gWRf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2gUREBmFkSAZxZF/2cW
        Rf9nFkX/ZxZF/2YYR/9sCzv/TU13/w/T9P8Pzu3/AOn//wDp//8A6f//AOn//wDp//8A6f//AOn//wDp
        //8A5///D8zs/xHQ7v9UPGn/aw09/2YYR/9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cWRf9nFkX/ZhZEgGcW
        RLBnFkX/ZxZF/2cWRf9nFkX/ZhdG/2oQP/9aM1//OH2k/zl2nv87cZj/O3GY/zpxmP86cZj/PHGX/ztx
        mP87cZj/O3GY/ztxmf84d5//OHuh/1wrWP9pEUH/ZxdG/2cWRf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cW
        Rf9mFUWgZhVFwGcWRf9nFkX/ZxZF/2cWRf9nFkX/ZxdG/2oRP/9vBTX/bgY3/20HOP9tBzj/bQc3/2wJ
        Ov9sCzn/bgc3/20HOP9tBzj/bQc3/24GNv9uBTX/aRJC/2cXRv9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cW
        Rf9nFkX/ZxZF/2YVRcBnFkX/ZxZF/2cWRf9nFkX/ZxZF/2cWRf9nFkX/ZxdF/2YaSf9mGUj/ZhlI/2Ub
        Sv9rED//Ukhx/1c4ZP9pE0L/ZRpJ/2YZSP9mGUj/ZhlI/2YZSP9nF0b/ZxZF/2cWRf9nFkX/ZxZF/2cW
        Rf9nFkX/ZxZF/2cWRf9nFkX/ZhVE8GcWRf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cW
        Rf9nFkX/ZhlI/24FNf82f6T/QmSL/28GNv9mGkj/ZxZF/2cWRf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cW
        Rf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cW
        Rf9nFkX/ZxZF/2cWRf9lGUj/bgU2/y+Otf8Vv+H/aQo7/2gWRP9nGEf/ZxZF/2cWRf9nFkX/ZxZF/2cW
        Rf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cW
        Rf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2YZSf9uCDf/O26V/wD3//80hqr/awc3/2sRQf9mGkn/ZhhG/2cW
        Rf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cW
        Rf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cWRf9nFkX/ZxdH/2sQP/9YOGP/B9/9/wDo//8pmr3/XSRS/24G
        N/9rDz//ZxlH/2YYR/9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cW
        Rf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cWRf9nFkX/ZxdG/2oQQP9bLlv/U0Zx/24DMf82f6X/AO7//wDp
        //8Py+z/OHmh/1kyXv9qCzz/aw8+/2YZSP9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cW
        Rf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cWRf9mGEf/bQk5/0pTfP8yia//bwQ1/2gS
        Qv89cpr/C9f1/wDu//8A8f//Ctn3/ymdwf9YNWX/bQg4/2YYR/9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cW
        Rf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2YZR/9tCTn/R1V+/w3a
        +f9gJFT/aw8+/2oMPf9dK1n/OXad/xi93f8A6f//AO3//wjc+v9EYYn/ags6/2cYR/9nFkX/ZxZF/2cW
        Rf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cWRf9nFkX/ZhhH/2sM
        PP9SQmz/AO3//yGrzf9kFUT/ahA+/2cVRP9rCTj/ZhZE/0Nlj/8O0e7/AOb//wLm//9KVH7/bQs7/2YZ
        R/9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cW
        Rf9nF0b/aBVE/2QaSf8XwuT/AO7//x+y1P9ZNGD/bQk4/2kSP/9oGEb/bQo2/1ovW/8YwOH/AOv//xjC
        4/9lGUj/aBVE/2cXRv9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cW
        Rf9nFkX/ZxZF/2cWRf9mGUj/bAw6/0lXfv8D5v//AOr//wnX9v8wiK3/VTpk/2cOPv9rEED/bA0+/10r
        WP8Rzev/AOj//1FHcv9rDDv/ZhhH/2cWRf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cW
        Rf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cWRf9nGUb/aws6/0dYgP8RzOz/AO3//wDy//8G3fv/HqvM/05I
        c/9pDz//bwY3/0NchP8A9f//QmCL/28IOP9mGUj/ZxZF/2cWRf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cW
        Rf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cWRf9mGEf/bQs7/18iUf9AapT/HbLU/wDn
        //8A7f//BeP//zOBp/9sDjz/ZhdE/xHQ7v9BYo3/cAc3/2cZSP9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cW
        Rf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cWRf9mGUf/aRNC/20I
        OP9nEUD/SlJ9/xfC4f8A5f//AO7//zZ/pP9xACz/LJu+/01Kdv9sCjr/ZhhH/2cWRf9nFkX/ZxZF/2cW
        Rf9mFUTvZhVFwGcWRf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cW
        Rf9nF0b/ZhlI/2cXRv9uCTf/YRtK/yWkx/8A5///Bt/8/1owXP9NUn7/XiZU/2kSQv9nFkX/ZxZF/2cW
        Rf9nFkX/ZxZF/2YVRcBnFkSwZxZF/2cWRf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cW
        Rf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2UaSf9qEkH/ZxJD/yKv0P8A9f//O3Wd/20MPP9mGUj/ZxZF/2cW
        Rf9nFkX/ZxZF/2cWRf9nFkX/ZhVFoGYWRIBnFkX/ZxZF/2cWRf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cW
        Rf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2UaSP9rDTv/WDRe/wLq//8rk7f/bgg1/2Ya
        SP9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cWRf9mFkSAZhNDUGcWRf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cW
        Rf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2YZSP9sBzX/HqnL/yia
        vf9tBjX/ZhlI/2cWRf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2gUREAAAAAAZxVEv2cWRf9nFkX/ZxZF/2cW
        Rf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cWRf9nFkX/ZhlI/3AF
        Nf86cpj/N3yi/24EM/9mGUj/ZxZF/2cWRf9nFkX/ZxZF/2cWRf9mFkSvAAAAAAAAAABoEEAgZxZF/2cW
        Rf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cW
        Rf9mGEf/aww7/1JHc/9VQGz/aw07/2YYRv9nFkX/ZxZF/2cWRf9nFkX/ZhVE72gQQCAAAAAAAAAAAAAA
        AABoFUVgZxZF/2cWRf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cW
        Rf9nFkX/ZxZF/2cWRf9nFUT/ZRxL/2cYRv9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2YVRO9oFUVgAAAAAAAA
        AAAAAAAAAAAAAAAAAABoEEAgZxVEv2cWRf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cW
        Rf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cWRf9nFUT/ZxZF/2cWRf9nFkX/ZxZF/2cWRf9mFkSvaBBAIAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAaBREQGYWRH9nFUWfZxVEv2YVRO9nFkX/ZxZF/2cW
        Rf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cWRf9nFkX/ZxZF/2cWRf9nFkX/ZxVEv2YWRK9mFkR/ZhNDUAAA
        AAAAAAAAAAAAAAAAAAAAAAAA+AAAH+AAAAfAAAADgAAAAYAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAgAAAAYAAAAHAAAAD4AAAB/gAAB8=
</value>
  </data>
</root>